!function(t){var e={};function i(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(n,a,function(e){return t[e]}.bind(null,a));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=4)}([function(t,e,i){t.exports=i.p+"tiles_stonebrick.2511e79759189b7c9249a61dd24743ee.png"},function(t,e,i){t.exports=i.p+"tiles_cavebrick.2658550fb4722231ea6f3468ae79dc56.png"},function(t,e,i){t.exports=i.p+"sprites.9cd92ffd5ad9d4978aad47f3d40eb83e.png"},function(t,e,i){},function(t,e,i){"use strict";i.r(e);i(3);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(2),l=i.n(o);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,i){return e&&c(t.prototype,e),i&&c(t,i),t}var d=function(t,e,i){return Math.max(e,Math.min(i,t))},p=function(t){return~t>>>0},f=function(t,e,i){var n=(1<<i)-1;return t<<(e%=i)&n|(t&n)>>i-e},v=function(t,e){var i,n=null;i=function(a){null===n&&(n=a);var r=(a-n)/t;r<1?(e(r),window.requestAnimationFrame(i)):e(1)},window.requestAnimationFrame(i)},y=function(t){for(var e=0,i=1779033703^t.length;e<t.length;e++)i=(i=Math.imul(i^t.charCodeAt(e),3432918353))<<13|i>>>19;return function(){return i=Math.imul(i^i>>>16,2246822507),i=Math.imul(i^i>>>13,3266489909),(i^=i>>>16)>>>0}},m=function(){function t(e){h(this,t),this.state=e}return u(t,[{key:"next",value:function(){var t=this.state+=1831565813;return t=Math.imul(t^t>>>15,1|t),(((t^=t+Math.imul(t^t>>>7,61|t))^t>>>14)>>>0)/4294967295}}]),t}(),g=function(){function t(e){h(this,t),void 0!==e&&(e=parseInt(e,36)),e||(e=(new Date).toISOString(),e=y(e)()),this.generator=new m(e)}return u(t,[{key:"next",value:function(){return this.generator.next()}},{key:"getState",value:function(){return this.generator.state.toString(36)}}]),t}(),x=function(t){return new Promise(function(e,i){var n=new Image;n.addEventListener("load",function(){return e(n)}),n.addEventListener("error",function(t){return i(t)}),n.src=t})},w=function(t,e){try{return new OffscreenCanvas(t,e)}catch(n){var i=document.createElement("canvas");return i.width=t,i.height=e,i}};function S(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var b=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=i,this.cells=new Array(this.width*this.height).fill(0)}var e,i,n;return e=t,(i=[{key:"reset",value:function(){this.cells=new Array(this.width*this.height).fill(0)}},{key:"within",value:function(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height}},{key:"set",value:function(t,e,i){t=d(t,0,this.width-1),e=d(e,0,this.height-1),this.cells[e*this.width+t]=i}},{key:"get",value:function(t,e){return t=d(t,0,this.width-1),e=d(e,0,this.height-1),this.cells[e*this.width+t]}},{key:"getDefault",value:function(t,e,i){return this.within(t,e)?this.cells[e*this.width+t]:i}},{key:"fill",value:function(t,e,i,n,a){t=d(t,0,this.width-1),e=d(e,0,this.height-1),i=d(i,0,this.width-t),n=d(n,0,this.height-e);for(var r=0;r<n;++r)for(var s=0;s<i;++s)this.set(t+s,e+r,a)}}])&&S(e.prototype,i),n&&S(e,n),t}();function k(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var I=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=i,this.posIndex={},this.typeIndex={}}var e,i,n;return e=t,(i=[{key:"reset",value:function(){this.posIndex={},this.typeIndex={}}},{key:"within",value:function(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height}},{key:"add",value:function(t){var e="".concat(t.x," ").concat(t.y);this.posIndex[e]=t,void 0===this.typeIndex[t.type]&&(this.typeIndex[t.type]=[]),this.typeIndex[t.type].push(t)}},{key:"clear",value:function(t,e){var i=this.get(t,e);if(null!==i){var n=this.typeIndex[i.type].indexOf(i);n>-1&&this.typeIndex[i.type].splice(n,1);var a="".concat(i.x," ").concat(i.y);delete this.posIndex[a]}}},{key:"set",value:function(t,e,i){i.x=d(t,0,this.width-1),i.y=d(e,0,this.height-1),this.clear(t,e),this.add(i)}},{key:"get",value:function(t,e){t=d(t,0,this.width-1),e=d(e,0,this.height-1);var i="".concat(t," ").concat(e),n=this.posIndex[i];return void 0!==n?n:null}},{key:"find",value:function(t){return void 0===this.typeIndex[t]?[]:this.typeIndex[t].slice()}},{key:"remove",value:function(t){this.clear(t.x,t.y)}},{key:"list",value:function(){return Object.values(this.posIndex)}}])&&k(e.prototype,i),n&&k(e,n),t}(),M={NorthDoor:Math.pow(2,0),NorthWall:Math.pow(2,1),EastDoor:Math.pow(2,2),EastWall:Math.pow(2,3),SouthDoor:Math.pow(2,4),SouthWall:Math.pow(2,5),WestDoor:Math.pow(2,6),WestWall:Math.pow(2,7),ALL:256};M.North=M.NorthDoor|M.NorthWall,M.East=M.EastDoor|M.EastWall,M.South=M.SouthDoor|M.SouthWall,M.West=M.WestDoor|M.WestWall,M.DOOR_MASK=M.NorthDoor|M.EastDoor|M.SouthDoor|M.WestDoor,M.WALL_MASK=M.NorthWall|M.EastWall|M.SouthWall|M.WestWall;var D=[{x:0,y:-1},{x:0,y:-1},{x:1,y:0},{x:1,y:0},{x:0,y:1},{x:0,y:1},{x:-1,y:0},{x:-1,y:0}],G=function(t,e,i){return{x:t+D[i].x,y:e+D[i].y}},C=function(t){return f(t,4,8)},E=function(t,e,i){var n=i|f(i,1,8);return e=C(e)&n,t&p(n)|e},O=function t(e,i,n,a,r,s){var o=r=C(r);s>0&&(o=function(t,e){var i=Math.floor(t.next()*M.ALL),n=Math.floor(t.next()*M.ALL),a=i&M.DOOR_MASK|e&M.DOOR_MASK;return(n&M.WALL_MASK|e&M.WALL_MASK)&p(f(a,1,8))|a}(i,r)),o=function(t,e,i,n){for(var a=0;a<8;a+=2){var r=1<<a,s=1<<a+1,o=G(e,i,a);if(t.within(o.x,o.y)){var l=t.get(o.x,o.y);0!==l&&(n=E(n,l,r))}else n&=p(r|s)}return n}(e,n,a,o),e.set(n,a,o);for(var l=0;l<8;l++){var h=1<<l,c=G(n,a,l);if(e.within(c.x,c.y)){var u=e.get(c.x,c.y);0!=(o&h)&&h!==r&&0===u&&t(e,i,c.x,c.y,h,s-1)}}};function L(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var W=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.xDown=null,this.yDown=null,this.element=e,this.onSwipe=i,this.element.addEventListener("touchstart",this.handleTouchStart.bind(this),!1),this.element.addEventListener("touchmove",this.handleTouchMove.bind(this),!1)}var e,i,n;return e=t,(i=[{key:"handleTouchStart",value:function(t){this.xDown=t.touches[0].clientX,this.yDown=t.touches[0].clientY}},{key:"handleTouchMove",value:function(t){if(this.xDown&&this.yDown&&this.onSwipe){var e=t.touches[0].clientX,i=t.touches[0].clientY;this.xDiff=this.xDown-e,this.yDiff=this.yDown-i,Math.abs(this.xDiff)>Math.abs(this.yDiff)?this.xDiff>0?this.onSwipe(t,"SwipeLeft"):this.onSwipe(t,"SwipeRight"):(this.yDiff>0?this.onSwipe(t,"SwipeUp"):this.onSwipe(t,"SwipeDown"),t.preventDefault()),this.xDown=null,this.yDown=null}}}])&&L(e.prototype,i),n&&L(e,n),t}();function z(t){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function A(t,e){return!e||"object"!==z(e)&&"function"!=typeof e?P(t):e}function j(t){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function P(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function T(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_(t,e)}function _(t,e){return(_=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function q(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function H(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function N(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function R(t,e,i){return e&&N(t.prototype,e),i&&N(t,i),t}var K=function(){function t(){H(this,t)}return R(t,[{key:"update",value:function(t){}},{key:"collect",value:function(t){}}]),t}(),B=function(t){function e(t){var i;return H(this,e),i=A(this,j(e).call(this)),Object.assign(P(i),t),i.spriteIndex=e.spriteIndex,i.type=e.type,i.sequenceIndex=0,i}return T(e,K),R(e,[{key:"update",value:function(t){this.sequenceIndex=parseInt(6*t)%3}}]),e}();q(B,"type","player"),q(B,"spriteIndex",0);var U=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).spriteIndex=e.spriteIndex,t.sequenceIndex=0,t.type=e.type,t}return T(e,K),R(e,[{key:"collect",value:function(t){return t.gemsCollected+=1,!0}}]),e}();q(U,"type","gem"),q(U,"spriteIndex",1);var Y=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).spriteIndex=e.spriteIndex,t.sequenceIndex=0,t.type=e.type,t.stamina=30,t}return T(e,K),R(e,[{key:"collect",value:function(t){return t.stamina=Math.min(t.maxStamina,t.stamina+this.stamina),!0}}]),e}();q(Y,"type","food"),q(Y,"spriteIndex",2);var F=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).spriteIndex=e.spriteIndex,t.sequenceIndex=0,t.type=e.type,t}return T(e,K),R(e,[{key:"collect",value:function(t){return t.health+=1,!0}}]),e}();q(F,"type","heart"),q(F,"spriteIndex",3);var J=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).spriteIndex=e.spriteIndex,t.sequenceIndex=0,t.type=e.type,t.counter=0,t.damage=1,t}return T(e,K),R(e,[{key:"update",value:function(){this.counter++,this.sequenceIndex=this.counter%3}},{key:"collect",value:function(t){return 1===this.sequenceIndex&&(t.health-=this.damage),!1}}]),e}();q(J,"type","spiketrap"),q(J,"spriteIndex",4);var V=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).type=e.type,t.spriteIndex=e.spriteIndex,t.sequenceIndex=0,t}return T(e,K),R(e,[{key:"collect",value:function(t){return t.coins+=1,!0}}]),e}();q(V,"type","coin"),q(V,"spriteIndex",6);var X=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).type=e.type,t.spriteIndex=e.spriteIndex,t.sequenceIndex=1,t}return T(e,K),R(e,[{key:"collect",value:function(t){return!0}}]),e}();q(X,"type","merchantexit"),q(X,"spriteIndex",5);var Q=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).type=e.type,t.spriteIndex=e.spriteIndex,t.sequenceIndex=1,t.cost=1e3,t}return T(e,K),R(e,[{key:"collect",value:function(t){if(t.gemsCollected>=this.cost)return t.coins+=1,t.gemsCollected-=this.cost,!0}}]),e}();q(Q,"type","merchantcoin"),q(Q,"spriteIndex",6);var Z=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).type=e.type,t.spriteIndex=e.spriteIndex,t.sequenceIndex=1,t.cost=5,t}return T(e,K),R(e,[{key:"collect",value:function(t){if(t.coins>=this.cost)return t.coins-=this.cost,t.initHealth+=1,t.health=t.initHealth,!0}}]),e}();q(Z,"type","merchantheart"),q(Z,"spriteIndex",3);var $=function(t){function e(){var t;return H(this,e),(t=A(this,j(e).call(this))).type=e.type,t.spriteIndex=e.spriteIndex,t.sequenceIndex=1,t.cost=2,t}return T(e,K),R(e,[{key:"collect",value:function(t){if(t.coins>=this.cost)return t.coins-=this.cost,t.maxStamina+=10,t.stamina=t.maxStamina,!0}}]),e}();q($,"type","merchantfood"),q($,"spriteIndex",2);var tt=function(t,e,i,n){var a=t.get(i,n)*(t.getDefault(i,n-1,1)|t.getDefault(i+1,n,1)<<1|t.getDefault(i,n+1,1)<<2|t.getDefault(i-1,n,1)<<3);return!(e.next()<.25)||3!==a&&9!==a&&11!==a?a:a-1},et=function(t,e,i,n){var a=new b(t.width,t.height);a.fill(0,0,a.width,a.height,1);for(var r=0,s=e.height;r<s;r++)for(var o=0,l=e.width;o<l;o++){var h=e.get(o,r);if(0!==h){var c=Math.floor(i/3),u=o*i,d=r*i;a.fill(u+1,d+1,i-2,i-2,0),0!=(h&M.NorthDoor)&&a.fill(u+1+c,d,c,1,0),0!=(h&M.NorthWall)&&a.fill(u+1,d,i-2,1,0),0!=(h&M.EastDoor)&&a.fill(u+i-1,d+1+c,1,c,0),0!=(h&M.EastWall)&&a.fill(u+i-1,d+1,1,i-2,0),0!=(h&M.SouthDoor)&&a.fill(u+1+c,d+i-1,c,1,0),0!=(h&M.SouthWall)&&a.fill(u+1,d+i-1,i-2,1,0),0!=(h&M.WestDoor)&&a.fill(u,d+1+c,1,c,0),0!=(h&M.WestWall)&&a.fill(u,d+1,1,i-2,0)}}for(var p=0,f=t.height;p<f;p++)for(var v=0,y=t.width;v<y;v++)t.set(v,p,tt(a,n,v,p))};function it(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var nt,at=5,rt=8,st=(nt=Math.round(4+window.devicePixelRatio))-nt%2,ot=new g(window.location.hash.substr(1)),lt=0,ht=function(t,e,i,n,a){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,s=arguments.length>6&&void 0!==arguments[6]&&arguments[6];t.drawImage(e,8*i,8*r,8,8,n,a,s?-8:8,8)},ct={offset:{x:0,y:-1},mask:M.North},ut={offset:{x:1,y:0},mask:M.East},dt={offset:{x:0,y:1},mask:M.South},pt={offset:{x:-1,y:0},mask:M.West},ft=function(){function t(e){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=this.loadState();Object.assign(this,n),this.gameState=lt,this.canvas=e,this.canvas.width=window.innerWidth-4,this.canvas.height=window.innerHeight-4,this.widthScaled=this.canvas.width/st,this.heightScaled=this.canvas.height/st,this.ctx=this.canvas.getContext("2d"),this.bgCanvas=w(this.canvas.width,this.canvas.height),this.mazeGrid=new b(parseInt(this.widthScaled/at/rt),parseInt(this.heightScaled/at/rt)),this.entityGrid=new I(this.mazeGrid.width,this.mazeGrid.height),this.tileGrid=new b(this.mazeGrid.width*at,this.mazeGrid.height*at),window.addEventListener("keydown",function(t){return i.handleInput(t,t.key)}),this.canvas.addEventListener("click",function(t){return i.handleInput(t,"click")}),this.swipeHandler=new W(e,function(t,e){return i.handleInput(t,e)}),Promise.all([x(a.a),x(s.a),x(l.a)]).then(function(t){i.tiles=[t[0],t[1]],i.sprites=t[2],i.reset()})}var e,i,n;return e=t,(i=[{key:"playerBaseState",value:function(){return{pos:{x:0,y:0},initHealth:3,health:3,maxStamina:100,stamina:100,gemsCollected:0,coins:0,levelsCompleted:0}}},{key:"baseState",value:function(){return{player:new B(this.playerBaseState()),stats:{maxGemsCollected:0,deaths:0,levelsCompleted:0,totalMoves:0}}}},{key:"loadState",value:function(){var t=localStorage.getItem("state"),e=this.baseState();if(t)try{var i=JSON.parse(t),n=Object.assign({},e);return Object.assign(n.player,i.player),Object.assign(n.stats,i.stats),n}catch(t){return e}return e}},{key:"saveState",value:function(){var t={player:{pos:this.player.pos,initHealth:this.player.initHealth,health:this.player.health,maxStamina:this.player.maxStamina,stamina:this.player.stamina,gemsCollected:this.player.gemsCollected,levelsCompleted:this.player.levelsCompleted,coins:this.player.coins},stats:{maxGemsCollected:this.stats.maxGemsCollected,deaths:this.stats.deaths,levelsCompleted:this.stats.levelsCompleted,totalMoves:this.stats.totalMoves}};localStorage.setItem("state",JSON.stringify(t))}},{key:"statAverageMovesPerLevel",value:function(){return this.stats.totalMoves>0&&this.stats.levelsCompleted>0?Math.round(this.stats.totalMoves/this.stats.levelsCompleted,2):0}},{key:"reset",value:function(t){this.gameState=lt,t&&window.history.pushState(null,null,"#"+ot.getState()),this.mazeGrid.reset(),this.entityGrid.reset(),this.tileGrid.reset(),this.gameState=1,this.player.levelsCompleted>0&&this.player.levelsCompleted%50==0?(this.gameState|=2,this.generateMerchantLevel()):this.generateMazeLevel(),this.drawMaze(this.bgCanvas.getContext("2d")),this.draw()}},{key:"generateMerchantLevel",value:function(){var t=parseInt(this.mazeGrid.width/2),e=parseInt(this.mazeGrid.height/2);this.mazeGrid.set(t,e,M.NorthWall|M.EastWall|M.SouthDoor|M.WestWall),this.mazeGrid.set(t,e-1,M.SouthWall),this.mazeGrid.set(t,e+1,M.NorthDoor),this.mazeGrid.set(t-1,e,M.EastWall),this.mazeGrid.set(t+1,e,M.WestWall),et(this.tileGrid,this.mazeGrid,at,ot),this.player.pos={x:t,y:e,dir:1},this.entityGrid.set(t,e-1,new Q),this.entityGrid.set(t-1,e,new Z),this.entityGrid.set(t+1,e,new $),this.entityGrid.set(t,e+1,new X)}},{key:"generateMazeLevel",value:function(){var t=parseInt(this.mazeGrid.width/2),e=parseInt(this.mazeGrid.height/2);O(this.mazeGrid,ot,t,e,M.DOOR_MASK,12),et(this.tileGrid,this.mazeGrid,at,ot),this.player.pos={x:t,y:e,dir:1},this.generateEntities(U,3,12),this.generateEntities(Y,1,5),this.generateEntities(J,1,5),this.generateEntities(F,.2),this.generateEntities(V,.05)}},{key:"generateEntities",value:function(t,e,i){var n;n=void 0===i?ot.next()<e?1:0:e+Math.round(ot.next()*(i-e));for(var a=0,r=1e3;a<n&&r>0;){r--;var s=parseInt(ot.next()*this.mazeGrid.width),o=parseInt(ot.next()*this.mazeGrid.height);0!==this.mazeGrid.get(s,o)&&null===this.entityGrid.get(s,o)&&(this.entityGrid.set(s,o,new t),a++)}}},{key:"playerMoveBy",value:function(t){var e=this,i=this.player.pos,n=i.x,a=i.y;this.player.pos.dir=t.x>=0?1:-1,v(500,function(i){e.player.pos.x=n+t.x*i,e.player.pos.y=a+t.y*i,e.player.update(i),1===i&&(e.player.stamina-=4,e.checkEntities(),e.endMove()),e.draw()})}},{key:"playerMove",value:function(t){var e={x:this.player.pos.x+t.offset.x,y:this.player.pos.y+t.offset.y},i=this.mazeGrid.get(this.player.pos.x,this.player.pos.y),n=0!=(this.mazeGrid.get(e.x,e.y)&C(t.mask));0!=(i&t.mask)&&n&&this.playerMoveBy(t.offset)}},{key:"playerRest",value:function(){this.player.stamina-=2,this.checkEntities(),this.endMove(),this.draw()}},{key:"checkEntities",value:function(){for(var t=this.entityGrid.list(),e=0;e<t.length;e++)t[e].update();var i=this.entityGrid.get(this.player.pos.x,this.player.pos.y);i&&i.collect(this.player)&&this.entityGrid.remove(i)}},{key:"endMove",value:function(){0!=(2&this.gameState)?this.endMoveMerchant():this.endMoveMaze()}},{key:"endMoveMerchant",value:function(){var t=this;this.saveState(),0===this.entityGrid.find("merchantexit").length&&(this.player.levelsCompleted+=1,this.stats.levelsCompleted+=1,this.fadeOut(this.ctx,500,function(){return t.reset(!0)}))}},{key:"endMoveMaze",value:function(){var t=this,e=!1;if(this.stats.maxGemsCollected=Math.max(this.stats.maxGemsCollected,this.player.gemsCollected),this.stats.totalMoves+=1,0===this.entityGrid.find("gem").length&&(this.player.levelsCompleted+=1,this.stats.levelsCompleted+=1,this.player.stamina=Math.min(this.player.stamina+40,100),e=!0),this.player.stamina<=0&&this.player.health>0&&(this.player.stamina=20,this.player.health-=1),this.player.health<=0){this.stats.deaths+=1;var i=this.player.coins;Object.assign(this.player,this.playerBaseState()),this.player.coins=i,this.player.health=this.player.initHealth,this.player.stamina=this.player.maxStamina,e=!0,this.showDeathScreen(this)}this.saveState(),e&&this.fadeOut(this.ctx,500,function(){return t.reset(!0)})}},{key:"fadeOut",value:function(t,e,i){var n=this;this.gameState=lt,v(e,function(e){t.save(),t.scale(st,st),t.fillStyle="rgba(0, 0, 0, 0.1)",t.fillRect(0,0,n.widthScaled,n.heightScaled),n.ctx.restore(),1===e&&i()})}},{key:"handleInput",value:function(t,e){if(0!=(1&this.gameState))switch(e){case"SwipeUp":case"ArrowUp":this.playerMove(ct),t.preventDefault();break;case"SwipeDown":case"ArrowDown":this.playerMove(dt),t.preventDefault();break;case"SwipeLeft":case"ArrowLeft":this.playerMove(pt),t.preventDefault();break;case"SwipeRight":case"ArrowRight":this.playerMove(ut),t.preventDefault();break;case"click":case" ":this.playerRest(),t.preventDefault()}}},{key:"draw",value:function(){this.ctx.drawImage(this.bgCanvas,0,0),this.drawEntities(this.ctx),this.drawPlayer(this.ctx),this.drawHUD(this.ctx)}},{key:"drawMaze",value:function(t){var e=Math.round(ot.next()),i=this.tiles[e];t.save(),t.imageSmoothingEnabled=!1,t.scale(st,st);var n=4*rt-1;t.drawImage(i,n,n,1,1,0,0,this.widthScaled,this.heightScaled);for(var a=0,r=this.tileGrid.height;a<r;a++)for(var s=0,o=this.tileGrid.width;s<o;s++)this.drawTile(t,i,s,a,this.tileGrid.get(s,a));t.restore()}},{key:"drawTile",value:function(t,e,i,n,a){var r=a%4*rt,s=Math.floor(a/4)*rt;t.drawImage(e,r,s,rt,rt,i*rt,n*rt,rt,rt)}},{key:"drawPlayer",value:function(t){var e=at*rt,i=.5*e-4;t.save(),t.imageSmoothingEnabled=!1,t.scale(st,st),t.translate(this.player.pos.x*e+i,this.player.pos.y*e+i),t.scale(this.player.pos.dir,1),ht(t,this.sprites,B.spriteIndex,0,0,this.player.sequenceIndex,this.player.pos.dir<0),t.restore()}},{key:"drawEntities",value:function(t){var e=at*rt,i=.5*e-4,n=this.entityGrid.list();t.save(),t.imageSmoothingEnabled=!1,t.scale(st,st);for(var a=0,r=n.length;a<r;a++){var s=n[a].spriteIndex,o=n[a].sequenceIndex;this.entityVisible(n[a])||(s=5,o=0),ht(t,this.sprites,s,n[a].x*e+i,n[a].y*e+i,o)}t.restore()}},{key:"entityVisible",value:function(t){var e=[ct,ut,dt,pt],i=parseInt(this.player.pos.x),n=parseInt(this.player.pos.y);if(t.x===i&&t.y===n)return!0;for(var a=this.mazeGrid.get(i,n),r=0;r<4;r++)if(0!=(a&e[r].mask)){var s=parseInt(this.player.pos.x)+e[r].offset.x,o=parseInt(this.player.pos.y)+e[r].offset.y;if(t.x===s&&t.y===o)return!0}return!1}},{key:"drawHUD",value:function(t){var e=this.widthScaled-10,i=e*this.player.stamina/this.player.maxStamina-2,n=this.heightScaled-5;t.save(),t.imageSmoothingEnabled=!1,t.scale(st,st),t.fillStyle="rgba(68, 36, 52, 1)",t.fillRect(5,n,e,5),t.fillStyle="rgba(210, 125, 44, 1)",t.fillRect(6,n+1,i,3),t.font="bold 8px serif",t.textAlign="end";var a="".concat(this.player.gemsCollected);t.fillText(a,this.widthScaled-16,this.heightScaled-9),ht(t,this.sprites,U.spriteIndex,this.widthScaled-8-5,this.heightScaled-16);var r="".concat(this.player.coins);t.fillText(r,this.widthScaled-43,this.heightScaled-9),ht(t,this.sprites,V.spriteIndex,this.widthScaled-8-32,this.heightScaled-16);for(var s=5,o=0;o<this.player.health;o++,s+=10)ht(t,this.sprites,F.spriteIndex,s,this.heightScaled-16);t.restore()}}])&&it(e.prototype,i),n&&it(e,n),t}(),vt=document.createElement("canvas");document.body.appendChild(vt),window.game=new ft(vt);var yt,mt=document.createElement("div");yt=function(t){t.preventDefault(),mt.style.display="none",mt.removeEventListener("click",yt)},mt.classList.add("start-screen"),mt.addEventListener("click",yt),mt.innerHTML='\n<div class="inner">\n<div class="title">Collect Gems</div>\n<div>\n  Press arrow keys to move, Space to wait a turn.<br/>\n  Or swipe to move, tap to wait a turn.<br/>\n  Click or tap to start<br/>\n</div>\n<table class="stats small">\n<tr><td>Max gems collected:</td><td>'.concat(game.stats.maxGemsCollected,"</td></tr>\n<tr><td>Deaths:</td><td>").concat(game.stats.deaths,"</td></tr>\n<tr><td>Levels completed:</td><td>").concat(game.stats.levelsCompleted,"</td></tr>\n<tr><td>Average moves per level:</td><td>").concat(game.statAverageMovesPerLevel(),"</td></tr>\n</table>\n</div>\n"),document.body.appendChild(mt);var gt=document.createElement("div");gt.classList.add("death-screen","hide"),gt.innerHTML='\n<div>\n  <div class="title">You died</div>\n  <div>Click or tap to continue.</div>\n  <table class="stats small">\n  <tr><td>Max gems collected:</td><td class="maxGemsCollected"></td></tr>\n  <tr><td>Deaths:</td><td class="deaths"></td></tr>\n  <tr><td>Levels completed:</td><td class="levelsCompleted"></td></tr>\n  <tr><td>Average moves per level:</td><td class="averageMovesPerLevel"></td></tr>\n  </table>\n</div>\n',gt.addEventListener("click",function(t){t.preventDefault(),gt.classList.add("hide")}),document.body.appendChild(gt),game.showDeathScreen=function(t){gt.querySelector(".maxGemsCollected").innerHTML=t.stats.maxGemsCollected,gt.querySelector(".deaths").innerHTML=t.stats.deaths,gt.querySelector(".levelsCompleted").innerHTML=t.stats.levelsCompleted,gt.querySelector(".averageMovesPerLevel").innerHTML=t.statAverageMovesPerLevel(),gt.classList.remove("hide")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,