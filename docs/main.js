!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){t.exports=n.p+"87f51cd97d4e3f4d576318c7b8442b76.css"},function(t,e,n){"use strict";n.r(e);n(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}var a=function(t,e,n){return Math.max(e,Math.min(n,t))},s=function(t){return~t>>>0},h=function(t,e,n){var i=(1<<n)-1;return t<<(e%=n)&i|(t&i)>>n-e},l=function(t){for(var e=0,n=1779033703^t.length;e<t.length;e++)n=(n=Math.imul(n^t.charCodeAt(e),3432918353))<<13|n>>>19;return function(){return n=Math.imul(n^n>>>16,2246822507),n=Math.imul(n^n>>>13,3266489909),(n^=n>>>16)>>>0}},u=function(){function t(e){i(this,t),this.state=e}return o(t,[{key:"next",value:function(){var t=this.state+=1831565813;return t=Math.imul(t^t>>>15,1|t),(((t^=t+Math.imul(t^t>>>7,61|t))^t>>>14)>>>0)/4294967295}}]),t}(),c=function(){function t(e){i(this,t),void 0!==e&&(e=parseInt(e,36)),e||(e=(new Date).toISOString(),e=l(e)()),this.generator=new u(e)}return o(t,[{key:"next",value:function(){return this.generator.next()}},{key:"getState",value:function(){return this.generator.state.toString(36)}}]),t}();function f(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var y=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=n,this.cells=new Array(this.width*this.height).fill(0)}var e,n,i;return e=t,(n=[{key:"reset",value:function(){this.cells=new Array(this.width*this.height).fill(0)}},{key:"within",value:function(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height}},{key:"set",value:function(t,e,n){t=a(t,0,this.width-1),e=a(e,0,this.height-1),this.cells[e*this.width+t]=n}},{key:"get",value:function(t,e){return t=a(t,0,this.width-1),e=a(e,0,this.height-1),this.cells[e*this.width+t]}}])&&f(e.prototype,n),i&&f(e,i),t}(),d={NorthDoor:Math.pow(2,0),NorthWall:Math.pow(2,1),EastDoor:Math.pow(2,2),EastWall:Math.pow(2,3),SouthDoor:Math.pow(2,4),SouthWall:Math.pow(2,5),WestDoor:Math.pow(2,6),WestWall:Math.pow(2,7),ALL:256};d.North=d.NorthDoor|d.NorthWall,d.East=d.EastDoor|d.EastWall,d.South=d.SouthDoor|d.SouthWall,d.West=d.WestDoor|d.WestWall,d.DOOR_MASK=d.NorthDoor|d.EastDoor|d.SouthDoor|d.WestDoor,d.WALL_MASK=d.NorthWall|d.EastWall|d.SouthWall|d.WestWall;var v=[{x:0,y:-1},{x:0,y:-1},{x:1,y:0},{x:1,y:0},{x:0,y:1},{x:0,y:1},{x:-1,y:0},{x:-1,y:0}],p=function(t,e,n){return{x:t+v[n].x,y:e+v[n].y}},w=function(t){return h(t,4,8)},S=function(t,e,n){var i=n|h(n,1,8);return e=w(e)&i,t&s(i)|e},g=function t(e,n,i,r,o,a){var l=o=w(o);a>0&&(l=function(t,e){var n=Math.floor(t.next()*d.ALL),i=Math.floor(t.next()*d.ALL),r=n&d.DOOR_MASK|e&d.DOOR_MASK;return(i&d.WALL_MASK|e&d.WALL_MASK)&s(h(r,1,8))|r}(n,o)),l=function(t,e,n,i){for(var r=0;r<8;r+=2){var o=1<<r,a=1<<r+1,h=p(e,n,r);if(t.within(h.x,h.y)){var l=t.get(h.x,h.y);0!==l&&(i=S(i,l,o))}else i&=s(o|a)}return i}(e,i,r,l),e.set(i,r,l);for(var u=0;u<8;u++){var c=1<<u,f=p(i,r,u);if(e.within(f.x,f.y)){var y=e.get(f.x,f.y);0!=(l&c)&&c!==o&&0===y&&t(e,n,f.x,f.y,c,a-1)}}};function O(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var M=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.xDown=null,this.yDown=null,this.element=e,this.element.addEventListener("touchstart",this.handleTouchStart.bind(this),!1),this.element.addEventListener("touchmove",this.handleTouchMove.bind(this),!1)}var e,n,i;return e=t,(n=[{key:"handleTouchStart",value:function(t){this.xDown=t.touches[0].clientX,this.yDown=t.touches[0].clientY}},{key:"handleTouchMove",value:function(t){if(this.xDown&&this.yDown&&this.onSwipe){var e=t.touches[0].clientX,n=t.touches[0].clientY;this.xDiff=this.xDown-e,this.yDiff=this.yDown-n,Math.abs(this.xDiff)>Math.abs(this.yDiff)?this.xDiff>0?this.onSwipe(t,"SwipeLeft"):this.onSwipe(t,"SwipeRight"):this.yDiff>0?this.onSwipe(t,"SwipeUp"):this.onSwipe(t,"SwipeDown"),this.xDown=null,this.yDown=null}}}])&&O(e.prototype,n),i&&O(e,i),t}();function E(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var m,x={ROOM_SIZE:5,SCALE:32,ITERATIONS:12},b=new c(window.location.hash.substr(1)),k=function(t,e,n,i,r){t.beginPath(),t.moveTo(e,n),t.lineTo(i,r),t.stroke()},R={offset:{x:0,y:-1},mask:d.North},I={offset:{x:1,y:0},mask:d.East},D={offset:{x:0,y:1},mask:d.South},_={offset:{x:-1,y:0},mask:d.West},A=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx=this.canvas.getContext("2d"),this.grid=new y(parseInt(e.width/x.SCALE/x.ROOM_SIZE),parseInt(e.height/x.SCALE/x.ROOM_SIZE)),this.reset(),window.addEventListener("keydown",function(t){return n.handleInput(t,t.key)}),new M(window.document.body).onSwipe=function(t,e){return n.handleInput(t,e)}}var e,n,i;return e=t,(n=[{key:"reset",value:function(t){t&&window.history.pushState(null,null,"#"+b.getState()),this.grid.reset();var e=parseInt(this.grid.width/2),n=parseInt(this.grid.height/2);g(this.grid,b,e,n,0,x.ITERATIONS),this.player={pos:{x:e,y:n}},this.generateGems(),this.draw()}},{key:"generateGems",value:function(){for(this.numGems=3+Math.round(9*b.next()),this.gems=[];this.gems.length<this.numGems;){var t={x:parseInt(b.next()*this.grid.width),y:parseInt(b.next()*this.grid.height)};0!==this.grid.get(t.x,t.y)&&this.gems.push(t)}}},{key:"playerMoveBy",value:function(t){var e,n,i,r,o=this.player.pos.x,a=this.player.pos.y;e=500,n=function(e){this.player.pos.x=o+t.x*e,this.player.pos.y=a+t.y*e,1===e&&this.checkGemsCollected(),this.draw()}.bind(this),r=null,i=function(t){null===r&&(r=t);var o=(t-r)/e;o<1?(n(o),window.requestAnimationFrame(i)):n(1)},window.requestAnimationFrame(i)}},{key:"playerMove",value:function(t){var e={x:this.player.pos.x+t.offset.x,y:this.player.pos.y+t.offset.y},n=this.grid.get(this.player.pos.x,this.player.pos.y),i=0!=(this.grid.get(e.x,e.y)&w(t.mask));0!=(n&t.mask)&&i&&this.playerMoveBy(t.offset)}},{key:"checkGemsCollected",value:function(){this.gems=this.gems.filter(function(t){return!(t.x===this.player.pos.x&&t.y===this.player.pos.y)}.bind(this)),0===this.gems.length&&this.reset(!0)}},{key:"handleInput",value:function(t,e){switch(e){case"SwipeUp":case"ArrowUp":this.playerMove(R),t.preventDefault();break;case"SwipeDown":case"ArrowDown":this.playerMove(D),t.preventDefault();break;case"SwipeLeft":case"ArrowLeft":this.playerMove(_),t.preventDefault();break;case"SwipeRight":case"ArrowRight":this.playerMove(I),t.preventDefault()}}},{key:"draw",value:function(){this.drawMaze(this.ctx),this.drawGems(this.ctx),this.drawPlayer(this.ctx)}},{key:"drawMaze",value:function(t){t.save(),t.scale(x.SCALE,x.SCALE),t.fillStyle="black",t.fillRect(0,0,this.canvas.width,this.canvas.height);for(var e=0;e<this.grid.width;e++)for(var n=0;n<this.grid.height;n++)this.drawRoom(t,e,n);t.restore()}},{key:"drawPlayer",value:function(t){t.save(),t.fillStyle="rgba(80, 220, 255, 1)";var e=x.ROOM_SIZE*x.SCALE,n=.4*e,i=this.player.pos.x*e,r=this.player.pos.y*e;t.fillRect(i+n,r+n,x.SCALE,x.SCALE),t.restore()}},{key:"drawGems",value:function(t){t.save(),t.fillStyle="rgba(80, 255, 80, 1)";for(var e=x.ROOM_SIZE*x.SCALE,n=.4*e,i=0,r=this.gems.length;i<r;i++){var o=this.gems[i].x*e,a=this.gems[i].y*e;t.fillRect(o+n,a+n,x.SCALE,x.SCALE)}t.restore()}},{key:"drawRoom",value:function(t,e,n){var i=this.grid.get(e,n);if(0!=i){var r=e*x.ROOM_SIZE,o=n*x.ROOM_SIZE;t.save(),t.fillStyle="rgba(128,128,128,1)",t.fillRect(r,o,x.ROOM_SIZE,x.ROOM_SIZE),t.fillStyle="rgba(64,64,64,1)",t.fillRect(r+1,o+1,x.ROOM_SIZE-2,x.ROOM_SIZE-2),t.strokeStyle="rgba(64, 64, 64, 1)",function(t,e,n,i){var r=Math.round(x.ROOM_SIZE/3);0!=(i&d.NorthDoor)&&k(t,e+r,n+.5,e+x.ROOM_SIZE-r,n+.5),0!=(i&d.NorthWall)&&k(t,e+1,n+.5,e+x.ROOM_SIZE-1,n+.5),0!=(i&d.EastDoor)&&k(t,e+x.ROOM_SIZE-.5,n+r,e+x.ROOM_SIZE-.5,n+x.ROOM_SIZE-r),0!=(i&d.EastWall)&&k(t,e+x.ROOM_SIZE-.5,n+1,e+x.ROOM_SIZE-.5,n+x.ROOM_SIZE-1),0!=(i&d.SouthDoor)&&k(t,e+r,n+x.ROOM_SIZE-.5,e+x.ROOM_SIZE-r,n+x.ROOM_SIZE-.5),0!=(i&d.SouthWall)&&k(t,e+1,n+x.ROOM_SIZE-.5,e+x.ROOM_SIZE-1,n+x.ROOM_SIZE-.5),0!=(i&d.WestDoor)&&k(t,e+.5,n+r,e+.5,n+x.ROOM_SIZE-r),0!=(i&d.WestWall)&&k(t,e+.5,n+1,e+.5,n+x.ROOM_SIZE-1)}(t,r,o,i),t.restore(),t.save(),t.strokeStyle="rgba(0, 0, 0, .1)",t.scale(1/x.SCALE,1/x.SCALE),t.strokeRect(r*x.SCALE+.5,o*x.SCALE+.5,x.ROOM_SIZE*x.SCALE-1,x.ROOM_SIZE*x.SCALE-1),t.restore()}}}])&&E(e.prototype,n),i&&E(e,i),t}(),L=document.createElement("div");m=function(t){L.style.display="none",L.removeEventListener("click",m)},L.classList.add("start-screen"),L.addEventListener("click",m),L.innerHTML='\n<div>\n<div class="title">Collect gems in Maze</div>\n<div>Press arrow keys to move.</div>\n<div>Or swipe to move.</div>\n<div>Click or tap to start</div>\n</div>\n';var W=document.createElement("canvas");document.body.appendChild(W),document.body.appendChild(L),window.game=new A(W)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,